// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel Setup

#define A_GPU 1
#define A_HLSL 1
#define A_HALF 1
#include "./ffx_a.hlsl"
#define FSR_EASU_H 1
#define FSR_RCAS_H 1
//declare input callbacks


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<uint4> _RCASConsts;
Texture2D InputTexture;
RWTexture2D<AF4> OutputTexture;

float _Sharpness;

AH4 FsrRcasLoadH(ASW2 p) {return InputTexture.Load(int3(p,0));}
void FsrRcasInputH(inout AH1 r,inout AH1 g,inout AH1 b){}

AH4 FsrRcasLoadHx2(ASW2 p) {return InputTexture.Load(int3(p,0));}
void FsrRcasInputHx2(inout AH1 r,inout AH1 g,inout AH1 b){}

AH4 FsrRcasLoadF(ASW2 p) {return InputTexture.Load(int3(p,0));}
void FsrRcasInputF(inout AH1 r,inout AH1 g,inout AH1 b){}

#include "./ffx_fsr1.hlsl"

[numthreads(64,1,1)]
void CSMain (uint3 LocalThreadId : SV_DispatchThreadID,uint3 WorkGroupId : SV_GroupID,uint3 Dtid : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    AU2 gxy = ARmp8x8(LocalThreadId.x) + AU2(WorkGroupId.x << 4u, WorkGroupId.y << 4u);
    AH3 Gamma2Color = AH3(0,0,0);
    //AH3 ojbkColor = AH3(0.5, 1, 0.5);
    FsrRcasH(Gamma2Color.r,Gamma2Color.g,Gamma2Color.b,gxy,_RCASConsts[0]);

    FsrRcasH(Gamma2Color.r,Gamma2Color.g,Gamma2Color.b,gxy,_RCASConsts[0]);
    OutputTexture[gxy] = AF4(Gamma2Color,1);

    gxy.x += 8u;
    FsrRcasH(Gamma2Color.r,Gamma2Color.g,Gamma2Color.b,gxy,_RCASConsts[0]);
    OutputTexture[gxy] = AF4(Gamma2Color,1);

    gxy.y += 8u;
    FsrRcasH(Gamma2Color.r,Gamma2Color.g,Gamma2Color.b,gxy,_RCASConsts[0]);
    OutputTexture[gxy] = AF4(Gamma2Color,1);

    gxy.x -= 8u;
    FsrRcasH(Gamma2Color.r,Gamma2Color.g,Gamma2Color.b,gxy,_RCASConsts[0]);
    OutputTexture[gxy] = AF4(Gamma2Color,1);
}
[numthreads(1,1,1)]
void Setup(){
    AU4 const0;

    FsrRcasCon(const0,_Sharpness);

    _RCASConsts[0] = const0;
}